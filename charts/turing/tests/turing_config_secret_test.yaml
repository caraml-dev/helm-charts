suite: Unit tests for turing Secrets
templates:
  - turing-config-secret.yaml
release:
  name: my-release
  namespace: my-namespace
  revision: 1
  isUpgrade: true
tests:
  - it: should set database connection properties accordingly when chart specific db is enabled
    set:
      global: {}
      turing-postgresql:
        enabled: true
        postgresqlDatabase: turing
        postgresqlUsername: turing
      turingExternalPostgresql:
        enabled: false
    asserts:
      - isKind:
          of: Secret
      - matchRegex:
          path: metadata.name
          pattern: my-release-turing-config$
      - matchRegex: # check database address
          path: stringData.[config.yaml]
          pattern: "Host: my-release-turing-postgresql.my-namespace.svc.cluster.local"
      - matchRegex: # check database name
          path: stringData.[config.yaml]
          pattern: "Database: turing"
      - matchRegex: # check database user
          path: stringData.[config.yaml]
          pattern: "User: turing"

  - it: should set database secret key and name from values if chart specific db is disabled, external db is enabled, secret name & key are set
    set:
      global: {}
      turing-postgresql:
        enabled: false
      turingExternalPostgresql:
        enabled: true
        address: turing-ext-db-address
        username: turing-ext
        database: turing-ext
        password: turing-ext-password
    asserts:
      - isKind:
          of: Secret
      - matchRegex:
          path: metadata.name
          pattern: my-release-turing-config$
      - matchRegex: # check database address
          path: stringData.[config.yaml]
          pattern: "Host: turing-ext-db-address"
      - matchRegex: # check database name
          path: stringData.[config.yaml]
          pattern: "Database: turing-ext"
      - matchRegex: # check database user
          path: stringData.[config.yaml]
          pattern: "User: turing-ext"

  - it: should set authz url from values
    set:
      global: {}
      config:
        AuthConfig:
          Enabled: false
          URL: http://mlp-authorization-keto
    asserts:
      - isKind:
          of: Secret
      - matchRegex:
          path: metadata.name
          pattern: my-release-turing-config$
      - matchRegex: # check authorization url
          path: stringData.[config.yaml]
          pattern: "AuthConfig:\n  Enabled: false\n  URL: http://mlp-authorization-keto"

  - it: should set authz url from global even if values is set
    set:
      global:
        protocol: http
        authz:
          serviceName: caraml-authz
      config:
        AuthConfig:
          Enabled: false
          URL: http://mlp-authorization-keto
    asserts:
      - isKind:
          of: Secret
      - matchRegex:
          path: metadata.name
          pattern: my-release-turing-config$
      - matchRegex: # check authorization url
          path: stringData.[config.yaml]
          pattern: "AuthConfig:\n  Enabled: false\n  URL: http://caraml-authz"

  - it: should use rendered version
    set:
      rendered:
        releasedVersion: v1.0.0-test-release
        ensemblerTag: some-ensembler-tag
    asserts:
      - isKind:
          of: Secret
      - matchRegex:
          path: metadata.name
          pattern: my-release-turing-config$
      - matchRegex:
          path: stringData.[config.yaml]
          pattern: "BuildContextURI: git://github.com/caraml-dev/turing.git#refs/tags/v1.0.0-test-release"
      - matchRegex:
          path: stringData.[config.yaml]
          pattern: "Image: ghcr.io/caraml-dev/turing/turing-router:v1.0.0-test-release"
      - matchRegex:
          path: stringData.[config.yaml]
          pattern: "BaseImage: ghcr.io/caraml-dev/turing/pyfunc-ensembler-service:some-ensembler-tag"
  - it: should use rendered version when BatchEnsemblingConfig is enabled
    set:
      rendered:
        releasedVersion: v1.0.0-test-release
        ensemblerTag: some-ensembler-tag
      config:
        BatchEnsemblingConfig:
          Enabled: true
    asserts:
      - isKind:
          of: Secret
      - matchRegex:
          path: metadata.name
          pattern: my-release-turing-config$
      - matchRegex:
          path: stringData.[config.yaml]
          pattern: "BuildContextURI: git://github.com/caraml-dev/turing.git#refs/tags/v1.0.0-test-release"
      - matchRegex:
          path: stringData.[config.yaml]
          pattern: "Image: ghcr.io/caraml-dev/turing/turing-router:v1.0.0-test-release"
      - matchRegex:
          path: stringData.[config.yaml]
          pattern: "BaseImage: ghcr.io/caraml-dev/turing/pyfunc-ensembler-service:some-ensembler-tag"
      #
      - matchRegex:
          path: stringData.[config.yaml]
          pattern: "BaseImage: ghcr.io/caraml-dev/turing/pyfunc-ensembler-job:some-ensembler-tag"
  - it: should use rendered version, but allow config to override value
    set:
      rendered:
        releasedVersion: v1.0.0-test-release
        ensemblerTag: some-ensembler-tag
        overrides:
          BatchEnsemblingConfig:
            ImageBuilderConfig:
              BaseImages: docker.io/caraml-dev/turing/pyfunc-ensembler-job:test-tag-123
      config:
        BatchEnsemblingConfig:
          Enabled: true
    asserts:
      - isKind:
          of: Secret
      - matchRegex:
          path: metadata.name
          pattern: my-release-turing-config$
      - matchRegex:
          path: stringData.[config.yaml]
          pattern: "BuildContextURI: git://github.com/caraml-dev/turing.git#refs/tags/v1.0.0-test-release"
      - matchRegex:
          path: stringData.[config.yaml]
          pattern: "Image: ghcr.io/caraml-dev/turing/turing-router:v1.0.0-test-release"
      - matchRegex:
          path: stringData.[config.yaml]
          pattern: "BaseImage: ghcr.io/caraml-dev/turing/pyfunc-ensembler-service:some-ensembler-tag"
      #
      - matchRegex:
          path: stringData.[config.yaml]
          pattern: "BaseImage: docker.io/caraml-dev/turing/pyfunc-ensembler-job:test-tag-123"
