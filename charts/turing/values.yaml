global:
  protocol: http

deployment:
  image:
    # -- Docker registry for Turing image
    registry: ghcr.io
    # -- Docker image repository for Turing image
    repository: caraml-dev/turing
    # -- Docker image tag for Turing image
    tag: v1.11.0-build.6-5695fb3
  labels: {}
  # -- Resources requests and limits for Turing API. This should be set
  # according to your cluster capacity and service level objectives.
  # Reference: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
  resources: {}
  livenessProbe:
    # -- HTTP path for liveness check
    path: "/v1/internal/live"
  readinessProbe:
    # -- HTTP path for readiness check
    path: "/v1/internal/ready"

  # -- List of string containing additional Turing API server arguments. For
  # example, multiple "-config" can be specified to use multiple config files
  extraArgs: []
  # Example
  # - -config=/etc/secrets/experiment.yaml
  # - -config=/etc/secrets/database.yaml

  # -- List of extra environment variables to add to Turing API server container
  extraEnvs: []
  # Example:
  # - name: DEMO_GREETING
  #   value: "Hello from the environment"
  # - name: DEMO_FAREWELL
  #   value: "Such a sweet sorrow"

  # -- List of extra initContainers to add to the Pod. For example, you
  # need to run some init scripts to fetch credentials from a remote server
  extraInitContainers: []
  # Example:
  # - name: init-myservice
  #   image: busybox:1.28
  #   command: ['sh', '-c', "until nslookup myservice.$(cat /var/run/secrets/kubernetes.io/serviceaccount/namespace).svc.cluster.local; do echo waiting for myservice; sleep 2; done"]

  # -- List of sidecar containers to attach to the Pod. For example, you can
  # attach sidecar container that forward logs or dynamically update some
  # configuration files.
  extraContainers: []
  # Example:
  # - name: count-agent
  #   image: k8s.gcr.io/fluentd-gcp:1.30
  #   env:
  #   - name: FLUENTD_ARGS
  #     value: -c /etc/fluentd-config/fluentd.conf
  #   volumeMounts:
  #   - name: varlog
  #     mountPath: /var/log
  #   - name: config-volume
  #     mountPath: /etc/fluentd-config

  # -- Extra volumes to attach to the Pod. For example, you can mount
  # additional secrets to these volumes
  extraVolumes: []
  # Example:
  # - name: varlog
  #   emptyDir: {}

  # -- Extra volume mounts to attach to Turing API server container. For example
  # to mount the extra volume containing secrets
  extraVolumeMounts: []
  # Example:
  # - name: varlog
  #   mountPath: /var/log

clusterConfig:
  # -- (bool) Configuration to tell Turing API how it should authenticate with deployment k8s cluster
  # By default, Turing API expects to use a remote k8s cluster for deployment and to do so, it requires
  # cluster access configurations to be configured as part of values.yaml
  useInClusterConfig: false
  # -- environmentConfigPath is a path to a file that contains environmentConfigs.
  # See api/environments-dev.yaml for example contents
  environmentConfigPath: "environments.yaml"

imageBuilder:
  clusterName: "test"
  k8sConfig: ''
  # Example json
  # '{
  #   "name": "dev-cluster",
  #   "cluster": {
  #     "server": "https://k8s.cluster",
  #     "certificate-authority-data": "some_cert_data"
  #   },
  #   "user": {
  #     "exec": {
  #       "apiVersion": "client.authentication.k8s.io/v1beta1",
  #       "args": [
  #         "--use_application_default_credentials"
  #       ],
  #       "command": "gke-gcloud-auth-plugin",
  #       "interactiveMode": "IfAvailable",
  #       "provideClusterInfo": true
  #     }
  #   }
  # }'

# -- Set this field to configure environment configs. See api/environments-dev.yaml for sample structure
environmentConfigs:
  - name: dev
    k8s_config:
      name: dev-cluster
      cluster: {}
      user: {}

# -- Turing Experiment Engines configuration
experimentEngines: []
# Example:
# - name: my-exp-engine
#   type: rpc-plugin
#   rpcPlugin:
#     image: ghcr.io/turing/my-exp-engine:latest
#   options:
#     key-1: value-1

# -- Override OpenAPI spec as long as it follows the OAS3 specifications.
# A common use for this is to set the enums of the ExperimentEngineType.
# See api/api/override-sample.yaml for an example.
openApiSpecOverrides: {}

service:
  # -- Turing API Kubernetes service port number
  externalPort: 8080
  # -- Turing API container port number
  internalPort: 8080

serviceAccount:
  # Specifies whether a ServiceAccount should be created. If set to false, the service account is expected to exist.
  create: true
  # The name of the ServiceAccount to use.
  name: turing
  annotations: {}
    # example.io/example: example

ingress:
  # -- Enable ingress to provision Ingress resource for external access to Turing API
  enabled: false
  # -- Set host value to enable name based virtual hosting. This allows routing
  # HTTP traffic to multiple host names at the same IP address. If no host is
  # specified, the ingress rule applies to all inbound HTTP traffic through
  # the IP address specified.
  # https://kubernetes.io/docs/concepts/services-networking/ingress/#name-based-virtual-hosting
  host: ""
  # -- Ingress class annotation to add to this Ingress rule,
  # useful when there are multiple ingress controllers installed
  class: ""
  # -- Whether to use networking.k8s.io/v1 (k8s version >= 1.19) or networking.k8s.io/v1beta1 (1.16 >= k8s version >= 1.22)
  useV1Beta1: false
  ## -- Additional annotations for the ingress
  annotations: {}

sentry:
  # -- Sentry DSN value used by both Turing API and Turing UI
  dsn: ""

# -- Turing API server configuration.
# Please refer to https://github.com/caraml-dev/turing/blob/main/api/turing/config/example.yaml
# for the detailed explanation on Turing API config options
# @default -- computed value
config:
  AlertConfig:
    Enabled: false
  AuthConfig:
    Enabled: false
    URL: http://mlp-authorization-keto
  BatchEnsemblingConfig:
    Enabled: &batchEnsemblingEnabled false
  EnsemblerServiceBuilderConfig:
    ClusterName: dev
    ImageBuildingConfig:
      BuildNamespace: default
      BuildTimeoutDuration: 20m
      DestinationRegistry: ghcr.io
      BaseImageRef:
        3.7.*: ghcr.io/caraml-dev/turing/pyfunc-ensembler-service:latest
      KanikoConfig:
        BuildContextURI: git://github.com/caraml-dev/turing.git#refs/heads/main
        DockerfileFilePath: engines/pyfunc-ensembler-service/app.Dockerfile
        Image: gcr.io/kaniko-project/executor
        ImageVersion: v1.6.0
        ResourceRequestsLimits:
          Requests:
            CPU: "1"
            Memory: 1Gi
          Limits:
            CPU: "1"
            Memory: 1Gi
  SparkAppConfig:
    CorePerCPURequest: 1.5
    CPURequestToCPULimit: 1.25
    SparkVersion: 2.4.5
    TolerationName: batch-job
    SubmissionFailureRetries: 3
    SubmissionFailureRetryInterval: 10
    FailureRetries: 3
    FailureRetryInterval: 10
    PythonVersion: "3"
    TTLSecond: 86400
  DeployConfig: {}
  DbConfig:
    # The maximum amount of time a connection may be idle. For more info see: https://pkg.go.dev/database/sql#DB.SetConnMaxIdleTime
    ConnMaxIdleTime: 0s
    # The maximum amount of time a connection may be reused. For more info see: https://pkg.go.dev/database/sql#DB.SetConnMaxLifetime
    ConnMaxLifetime: 0s
    # The maximum number of connections in the idle connection pool. For more info see: https://pkg.go.dev/database/sql#DB.SetMaxIdleConns
    MaxIdleConns: 0
    # The maximum number of open connections to the database. For more info see: https://pkg.go.dev/database/sql#DB.SetMaxOpenConns
    MaxOpenConns: 0
  KubernetesLabelConfigs: {}
  MLPConfig:
    # Set the Merlin URL if deployed externally
    MerlinURL: http://merlin:8080/v1
    # Set the MLP URL if deployed externally
    MLPURL: http://mlp:8080
  Sentry:
    Enabled: false
  RouterDefaults:
    Image: ghcr.io/caraml-dev/turing/turing-router:v1.11.0
    FluentdConfig:
      Image: ghcr.io/caraml-dev/turing/fluentd:v1.8.0

# -- Turing UI configuration.
# Please Refer to https://github.com/caraml-dev/turing/blob/main/ui/public/app.config.js
# for the detailed explanation on Turing UI config options
# @default -- computed value
uiConfig:
  alertConfig:
    enabled: false
    # This value is passed down to the create / update alerts API
    environment: ""
  apiConfig:
    turingApiUrl: /api/turing/v1
    merlinApiUrl: /api/merlin/v1
    mlpApiUrl: /api/v1
  appConfig:
    docsUrl:
      - label: Turing User Guide
        href: https://github.com/caraml-dev/turing/tree/main/docs
    scaling:
      maxAllowedReplica: 20
    batchEnsemblingEnabled: *batchEnsemblingEnabled
  authConfig:
    oauthClientId: ""
  sentryConfig: {}

# If you would like to use an external postgres database for Turing, you can connect using these credentials
turingExternalPostgresql:
  # -- If you would like to use an external postgres database, enable it here using this
  enabled: false
  # -- External postgres database user
  username: turing
  # -- External postgres database schema
  database: turing
  # -- Set the External postgres db password using this value at runtime (using --set flag) to create a secret
  password: password
  # -- Host address for the External postgres
  address: 127.0.0.1
  # -- Enable this if you need the chart to create a secret when you provide the password above. To be used together with password.
  createSecret: false
  # -- If a secret is created by external systems (eg. Vault)., mention the secret name here
  secretName: ""
  # -- If a secret is created by external systems (eg. Vault)., mention the key under which password is stored in secret (eg. postgresql-password)
  secretKey: ""
turing-postgresql:
  enabled: true
  postgresqlUsername: turing
  postgresqlDatabase: turing
  # -- By default postgres will generate a password, if you wish to choose the password, secret will be created using this password, must be specified using --set flag.
  # postgresqlPassword: turing
  resources:
    requests:
      cpu: 100m
      memory: 512Mi
  # metrics:
  #   enabled: true
  #   serviceMonitor:
  #     enabled: false
  # replication:
  #   enabled: false
  #   user: repl_user
  #   password: repl_password
  #   slaveReplicas: 2
  #   Set synchronous commit mode: on, off, remote_apply, remote_write and local
  #   ref: https://www.postgresql.org/docs/9.6/runtime-config-wal.html#GUC-WAL-LEVEL
  #   synchronousCommit: "on"
  #   From the number of `slaveReplicas` defined above, set the number of those that will have synchronous replication
  #   NOTE: It cannot be > slaveReplicas
  #   numSynchronousReplicas: 2
  #   Replication Cluster application name. Useful for defining multiple replication policies
  #   applicationName: turing
  persistence:
    size: 10Gi

mlp:
  enabled: true
  environmentConfigSecret:
    name: ""

merlin:
  enabled: true
  mlp:
    enabled: false

rules:
  # -- Enable this to provision Oathkeeper Rule CRDs for Turing API endpoints
  enabled: false
  apiPrefixRegex: ".+"
