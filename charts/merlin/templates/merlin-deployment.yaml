{{- $globReactAppHomepage := include "common.get-component-value" (list .Values.global "merlin" (list "uiPrefix"))}}
{{- $globMerlinApi := include "common.get-component-value" (list .Values.global "merlin" (list "vsPrefix" "apiPrefix"))}}
{{- $globMlpApi := include "common.get-component-value" (list .Values.global "mlp" (list "vsPrefix"))}}
{{- $globMlpApiHost := include "merlin.get-workload-host" (list .Values.global .Release.Namespace "mlp")}}
{{- $globOauthClientID := include "common.get-oauth-client" .Values.global }}
{{- $globFeastApiHost := include "merlin.get-feast-api-host" .Values.global }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "merlin.fullname" .}}
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "merlin.labels" . | nindent 4 }}
    {{- if .Values.deployment.labels }}
      {{- toYaml .Values.deployment.labels | nindent 4 }}
    {{- end }}
  {{- if .Values.deployment.annotations }}
  annotations:
  {{ toYaml .Values.deployment.annotations | indent 2 }}
  {{- end }}
spec:
  replicas: {{ .Values.deployment.replicaCount }}
  selector:
    matchLabels:
      app: {{ template "merlin.name" .}}
      release: {{ .Release.Name }}
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 4
      maxUnavailable: 0
  template:
    metadata:
      labels:
        app: {{ template "merlin.name" .}}
        release: {{ .Release.Name }}
        {{- if .Values.deployment.podLabels }}
          {{- toYaml .Values.deployment.podLabels | nindent 8 }}
        {{- end }}
      annotations:
        prometheus.io/scrape: 'true'
        prometheus.io/port: "{{ .Values.service.internalPort }}"
    spec:
      {{- if (or .Values.serviceAccount.create .Values.serviceAccount.name) }}
      serviceAccountName: {{ template "merlin.serviceAccountName" . }}
      {{- end }}
      {{- with (include "merlin.initContainers" . | fromYaml) }}
      {{- toYaml . | nindent 6 }}
      {{- end }}
      containers:
      - name: merlin
        image: {{ include "merlin.deploymentTag" (list $ . .Values.rendered) }}
        imagePullPolicy: {{ .Values.deployment.image.pullPolicy }}
        ports:
          - containerPort: {{ .Values.service.internalPort }}
        livenessProbe:
          httpGet:
            path: /v1/internal/live
            port: {{ .Values.service.internalPort }}
            scheme: HTTP
          initialDelaySeconds: 10
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 5
        readinessProbe:
          httpGet:
            path: /v1/internal/ready
            port: {{ .Values.service.internalPort }}
            scheme: HTTP
          initialDelaySeconds: 10
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 5
        resources:
          {{- toYaml .Values.deployment.resources | nindent 10 }}
        env:
          - name: DBCONFIG_PASSWORD
            valueFrom:
              secretKeyRef:
                name: {{ include "common.postgres-password-secret-name" (list (index .Values "merlin-postgresql") .Values.merlinExternalPostgresql .Release .Chart ) }}
                key: {{ include "common.postgres-password-secret-key" (list .Values.merlinExternalPostgresql) }}
          {{- with .Values.deployment.extraEnvs }}
          {{- toYaml . | nindent 10 }}
          {{- end }}
        volumeMounts:
        - name: config
          mountPath: /etc/merlin
        - name: environments
          mountPath: {{ include "merlin.environments.directory" . }}
        {{- with .Values.deployment.extraVolumeMounts }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
        args:
        - -config
        - /etc/merlin/config.yaml
        {{- with .Values.deployment.extraArgs }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
      {{- if .Values.swagger.enabled }}
      - name: swagger-ui
        image: "swaggerapi/swagger-ui:{{ .Values.swagger.image.tag }}"
        imagePullPolicy: IfNotPresent
        ports:
          - containerPort: {{ .Values.swagger.service.internalPort }}
        resources:
          requests:
            cpu: 50m
            memory: 128Mi
          limits:
            cpu: 500m
            memory: 256Mi
        env:
          - name: LAYOUT
            value: "BaseLayout"
          - name: SWAGGER_JSON
            value: "/app/swagger.yaml"
          - name: PORT
            value: "{{ .Values.swagger.service.internalPort }}"
          - name: API_HOST
            value: "{{ .Values.swagger.apiHost }}"
          - name: BASE_PATH
            value: "{{ .Values.swagger.basePath }}"
        command: ['sh', '-c']
        args:
          - |
            mkdir /app
            echo "Fetching swagger configuration from http://127.0.0.1:{{ .Values.service.internalPort }}/swagger.yaml..."
            until $$(wget -O $${SWAGGER_JSON} --tries 1 --timeout 1 http://127.0.0.1:{{ .Values.service.internalPort }}/swagger.yaml); do
              printf '.'
              sleep 10
            done
            echo "Update Swagger config..."
            sed -r -i 's/^(\s*)(host\s*:.*$$)/\host: "'$${API_HOST}'"/' $${SWAGGER_JSON}
            sed -r -i 's#^(\s*)(basePath\s*:.*$$)#\basePath: "'$${BASE_PATH}'"#' $${SWAGGER_JSON}
            echo "Running Swagger UI..."
            /usr/share/nginx/run.sh
      {{- end }}
      {{- if .Values.merlinExternalPostgresql.enableProxySidecar }}
      {{- tpl (toYaml (index .Values.merlinExternalPostgresql.sidecarSpec .Values.merlinExternalPostgresql.proxyType "spec")) . | nindent 6 }}
      {{- end }}
      {{- with .Values.deployment.extraContainers }}
      {{- toYaml . | nindent 6 }}
      {{- end }}
      volumes:
      - name: config
        secret:
          secretName: {{ template "merlin.fullname" . }}-config
      - name: environments
        secret:
          secretName: {{ ternary (printf "%s-environments" (include "merlin.fullname" .) ) ( .Values.mlp.environmentConfigSecret.name ) (eq .Values.mlp.environmentConfigSecret.name "") }}
      {{- with .Values.deployment.extraVolumes }}
      {{- toYaml . | nindent 6 }}
      {{- end }}

{{- if .Values.imagePullSecrets }}
      imagePullSecrets:
{{- toYaml .Values.imagePullSecrets | nindent 8 }}
{{- end }}

{{- if .Values.nodeSelector }}
      nodeSelector:
{{- toYaml .Values.nodeSelector | nindent 8 }}
{{- end }}
{{- with .Values.deployment.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
{{- end }}
