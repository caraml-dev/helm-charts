suite: Unit tests for merlin Secrets
templates:
  - merlin-config-secret.yaml
release:
  name: my-release
  namespace: my-namespace
  revision: 1
  isUpgrade: true
tests:
  - it: should set database connection properties accordingly when chart specific db is enabled
    set:
      global: {}
      merlin-postgresql:
        enabled: true
        postgresqlDatabase: merlin
        postgresqlUsername: merlin
      merlinExternalPostgresql:
        enabled: false
    asserts:
      - isKind:
          of: Secret
      - matchRegex:
          path: metadata.name
          pattern: my-release-merlin-config$
      - matchRegex: # check database address
          path: stringData.[config.yaml]
          pattern: "Host: my-release-merlin-postgresql.my-namespace.svc.cluster.local"
      - matchRegex: # check database name
          path: stringData.[config.yaml]
          pattern: "Database: merlin"
      - matchRegex: # check database user
          path: stringData.[config.yaml]
          pattern: "User: merlin"

  - it: should set database secret key and name from values if chart specific db is disabled, external db is enabled, secret name & key are set
    set:
      global: {}
      merlin-postgresql:
        enabled: false
      merlinExternalPostgresql:
        enabled: true
        address: merlin-ext-db-address
        username: merlin-ext
        database: merlin-ext
        password: merlin-ext-password
    asserts:
      - isKind:
          of: Secret
      - matchRegex:
          path: metadata.name
          pattern: my-release-merlin-config$
      - matchRegex: # check database address
          path: stringData.[config.yaml]
          pattern: "Host: merlin-ext-db-address"
      - matchRegex: # check database name
          path: stringData.[config.yaml]
          pattern: "Database: merlin-ext"
      - matchRegex: # check database user
          path: stringData.[config.yaml]
          pattern: "User: merlin-ext"

  - it: should set authz url from values
    set:
      global: {}
      config:
        AuthorizationConfig:
          AuthorizationEnabled: false
          AuthorizationServerURL: http://mlp-authorization-keto
    asserts:
      - isKind:
          of: Secret
      - matchRegex:
          path: metadata.name
          pattern: my-release-merlin-config$
      - matchRegex: # check authorization url
          path: stringData.[config.yaml]
          pattern: "AuthorizationConfig:\n  AuthorizationEnabled: false\n  AuthorizationServerURL: http://mlp-authorization-keto"

  - it: should set authz url from global even if values is set
    set:
      global:
        protocol: http
        authz:
          serviceName: caraml-authz
      config:
        AuthorizationConfig:
          AuthorizationEnabled: false
          AuthorizationServerURL: http://mlp-authorization-keto
    asserts:
      - isKind:
          of: Secret
      - matchRegex:
          path: metadata.name
          pattern: my-release-merlin-config$
      - matchRegex: # check authorization url
          path: stringData.[config.yaml]
          pattern: "AuthorizationConfig:\n  AuthorizationEnabled: false\n  AuthorizationServerURL: http://caraml-authz"

  - it: should set image builder's kaniko service account to kaniko-merlin
    set:
      imageBuilder:
        serviceAccount:
          create: true
          name: kaniko
    asserts:
      - isKind:
          of: Secret
      - matchRegex:
          path: metadata.name
          pattern: my-release-merlin-config$
      - matchRegex:
          path: stringData.[config.yaml]
          pattern: "KanikoServiceAccount: kaniko-my-release-merlin"

  - it: should use rendered version
    set:
      rendered:
        releasedVersion: v1.0.0-test-release
    asserts:
      - isKind:
          of: Secret
      - matchRegex:
          path: metadata.name
          pattern: my-release-merlin-config$
      - matchRegex:
          path: stringData.[config.yaml]
          pattern: "ImageName: ghcr.io/caraml-dev/merlin/merlin-pyfunc-base-py37:1.0.0-test-release"
      - matchRegex:
          path: stringData.[config.yaml]
          pattern: "ImageName: ghcr.io/caraml-dev/merlin/merlin-pyfunc-base-py38:1.0.0-test-release"
      - matchRegex:
          path: stringData.[config.yaml]
          pattern: "ImageName: ghcr.io/caraml-dev/merlin/merlin-pyfunc-base-py39:1.0.0-test-release"
      - matchRegex:
          path: stringData.[config.yaml]
          pattern: "ImageName: ghcr.io/caraml-dev/merlin/merlin-pyfunc-base-py310:1.0.0-test-release"
      - matchRegex:
          path: stringData.[config.yaml]
          pattern: "ImageName: ghcr.io/caraml-dev/merlin/merlin-pyspark-base-py37:1.0.0-test-release"
      - matchRegex:
          path: stringData.[config.yaml]
          pattern: "ImageName: ghcr.io/caraml-dev/merlin/merlin-pyspark-base-py38:1.0.0-test-release"
      - matchRegex:
          path: stringData.[config.yaml]
          pattern: "ImageName: ghcr.io/caraml-dev/merlin/merlin-pyspark-base-py39:1.0.0-test-release"
      - matchRegex:
          path: stringData.[config.yaml]
          pattern: "ImageName: ghcr.io/caraml-dev/merlin/merlin-pyspark-base-py310:1.0.0-test-release"
      - matchRegex:
          path: stringData.[config.yaml]
          pattern: "ImageName: ghcr.io/caraml-dev/merlin-transformer:1.0.0-test-release"
  - it: should use imageBuilder contextRef when set
    set:
      imageBuilder:
        contextRef: "refs/branch/test"
    asserts:
      - isKind:
          of: Secret
      - matchRegex:
          path: metadata.name
          pattern: my-release-merlin-config$
      - matchRegex:
          path: stringData.[config.yaml]
          pattern: "BuildContextURI: git://github.com/caraml-dev/merlin.git#refs/branch/test"
