apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "mlp.fullname" . }}
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "mlp.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.deployment.replicaCount }}
  selector:
    matchLabels:
      app: {{ template "mlp.name" .}}
      release: {{ .Release.Name }}
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 2
      maxUnavailable: 0
  template:
    metadata:
      labels:
        app: {{ template "mlp.name" .}}
        release: {{ .Release.Name }}
        {{- if .Values.deployment.podLabels }}
        {{- toYaml .Values.deployment.podLabels | nindent 8 }}
        {{- end }}
    spec:
      containers:
        - name: api
          image: "{{ .Values.deployment.image.registry }}/{{ .Values.deployment.image.repository }}:{{ .Values.deployment.image.tag }}"
          imagePullPolicy: {{ .Values.deployment.image.pullPolicy }}
          ports:
            - containerPort: {{ .Values.service.internalPort }}
          livenessProbe:
            httpGet:
              path: {{ .Values.deployment.livenessProbe.path }}
              port: {{ .Values.service.internalPort }}
              scheme: HTTP
            initialDelaySeconds: {{ default "30" .Values.deployment.livenessProbe.initialDelaySeconds }}
            periodSeconds: {{ default "10" .Values.deployment.livenessProbe.periodSeconds }}
            successThreshold: {{ default "1" .Values.deployment.livenessProbe.successThreshold }}
            timeoutSeconds: {{ default "5" .Values.deployment.livenessProbe.timeoutSeconds }}
          readinessProbe:
            httpGet:
              path: {{ .Values.deployment.readinessProbe.path }}
              port: {{ .Values.service.internalPort }}
              scheme: HTTP
            initialDelaySeconds: {{ default "30" .Values.deployment.readinessProbe.initialDelaySeconds }}
            periodSeconds: {{ default "10" .Values.deployment.readinessProbe.periodSeconds }}
            successThreshold: {{ default "1" .Values.deployment.readinessProbe.successThreshold }}
            timeoutSeconds: {{ default "5" .Values.deployment.readinessProbe.timeoutSeconds }}
          {{- if .Values.deployment.resources }}
          resources: {{- toYaml .Values.deployment.resources | nindent 12 }}
          {{- end }}
          args:
            - --config
            - /etc/caraml/mlp-config.yaml
{{- if .Values.deployment.args }}
{{ toYaml .Values.deployment.args | indent 12 -}}
{{ end }}
{{- if .Values.deployment.command }}
          command:
{{ toYaml .Values.deployment.command | indent 12 -}}
{{ end }}
          env:
            - name: DATABASE__PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ template "postgres.password-secret-name" . }}
                  key: {{ template "postgres.password-secret-key" . }}
            - name: ENCRYPTION_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ include "mlp.encryption-key-name" . | quote}}
                  key: encryption-key
          volumeMounts:
            - mountPath: /etc/caraml
              name: config
{{- if .Values.deployment.imagePullSecrets }}
      imagePullSecrets:
{{ toYaml .Values.deployment.imagePullSecrets | indent 6 }}
{{- end }}

{{- if .Values.deployment.nodeSelector }}
      nodeSelector:
{{ toYaml .Values.deployment.nodeSelector | indent 8 }}
{{- end }}
      volumes:
        - name: config
          configMap:
            name: {{ template "mlp.config-cm-name" . }}
